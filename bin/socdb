#!/usr/bin/env node   
'use strict' //  -*-mode: js2 -*- 

process.on('unhandledRejection', (reason, p) => {
  console.error(process.argv[1], 'Unhandled Rejection at: Promise', p, 'reason:', reason);
  process.exit()
});

const Tilda = require('tilda')
const Budget = require('resource-budget')
const socdb = require('..')

// https://github.com/IonicaBizau/tilda

new Tilda({
  name: 'socdb',
  version: require('../package').version,
  description: '@@@',
  documentation: '@@@',
  examples: [ ]
}, {
  stdin: true
})
  .action([
    {
      name: 'fetch-user',
      desc: 'fetch and display information about a user',
      args: [{
        name: "user",
        type: String,
        desc: 'user id, screen_name, or profile URL',
        stdin: true
      }]
    }
  ]).on('fetch-user', action => {
    console.log('action.args', action.args)
    socdb.fetchUser(action.args.user)
  })

  .action([
    {
      name: 'fetch-timeline',
      desc: 'fetch and display timeline for a user',
      args: [{
        name: "user",
        type: String,
        desc: 'user id, screen_name, or profile URL',
        stdin: true
      }],
      options: [{
        opts: ['objects'],
        desc: 'est how many objects to load',
        type: Number,
        default: 1000
      },{
        opts: ['fetches'],
        desc: 'est how fetches to perform',
        type: Number,
        default: 3
      }]
    }
  ]).on('fetch-timeline', action => {
    console.log('action.args', action.args)
    const budget = new Budget({
      objects: action.options.objects.value,
      fetches: action.options.fetches.value
    })
    console.log('budget', budget)
    socdb.fetchTimeline(action.args.user, budget)
      .then(items => {
        console.log('fetched', items.length, 'items')
        console.log('budget left at', budget)
        //for (let i of items) {
        //  console.log(i.text)
        //}
      })
  })

